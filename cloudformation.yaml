AWSTemplateFormatVersion: "2010-09-09"

Description: Connext router infrastructure 
  KeyName:
    Type: "AWS::EC2::KeyPair::KeyName"
    Default: YOUR_KEY_PAIR_NAME
    Description: The EC2 Key Pair to allow SSH access to the instances

  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: develop

  VpcCIDR:
    Type: String
    Default: 192.168.0.0/16
    Description: The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range.

  PublicSubnet1CIDR:
    Type: String
    Default: 192.168.0.0/18
    Description: CidrBlock for public subnet 01 within the VPC

  PrivateSubnet1CIDR:
    Type: String
    Default: 192.168.128.0/18
    Description: CidrBlock for private subnet 01 within the VPC

  NodeInstanceType:
    Type: String
    Default: t3.large
    AllowedValues:
      - t3.large
    ConstraintDescription: Must be a valid EC2 instance type
    Description: EC2 instance type for the node instances

Mappings:
  RegionMap:
    ap-southeast-1:
      "HVM64": "ami-059fcf742de12af88"

Resources:
  # ----------------------------------
  # VPC AND SUBNET
  # ----------------------------------
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-VPC'

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public Subnets
      - Key: Network
        Value: Public

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Subnet AZ1
      - Key: Network
        Value: Private01

  PublicRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRoute01:
    DependsOn:
    - VPCGatewayAttachment
    - NatGateway01
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway01

  NatGateway01:
    DependsOn:
    - NatGatewayEIP1
    - PublicSubnet1
    - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NatGatewayEIP1.AllocationId'
      SubnetId: !Ref PublicSubnet1
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-NatGatewayAZ1'

  NatGatewayEIP1:
    DependsOn:
    - VPCGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Public Subnet (AZ1)'

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Private Subnet (AZ1)'

  
  # Remote Instance
  RemoteSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Remote Security group allow ssh from outside
      VpcId: !Ref VPC

  RemoteSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: RemoteSecurityGroup
    Properties:
      GroupId: !Ref RemoteSecurityGroup
      Description: Allow ssh from outside
      FromPort: 22
      ToPort: 22
      IpProtocol: "tcp"
      CidrIp: 0.0.0.0/0

  RemoteInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: /
      Roles:
        - Ref: RemoteInstanceRole

  RemoteInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      RoleName: !Sub '${AWS::StackName}-remote-instance-role'

  RemoteInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", HVM64]
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      SubnetId: !Ref PublicSubnet1
      IamInstanceProfile: !Ref RemoteInstanceProfile
      SecurityGroupIds:
        - !Ref RemoteSecurityGroup
      Tags:
        - Key: Name
          Value: 'remote-server'

  # Router Instance
  RouterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Remote Security group allow ssh from outside
      VpcId: !Ref VPC

  RouterSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: RouterSecurityGroup
    Properties:
      GroupId: !Ref RouterSecurityGroup
      Description: Allow ssh from outside
      FromPort: 22
      ToPort: 22
      IpProtocol: "tcp"
      SourceSecurityGroupId: !Ref RemoteSecurityGroup

  RouterInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: /
      Roles:
        - Ref: RouterInstanceRole

  RouterInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      RoleName: !Sub '${AWS::StackName}-router-instance-role'

  RouterInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", HVM64]
      InstanceType: t2.large
      KeyName: !Ref KeyName
      SubnetId: !Ref PrivateSubnet1
      IamInstanceProfile: !Ref RouterInstanceProfile
      SecurityGroupIds:
        - !Ref RouterSecurityGroup
      BlockDeviceMappings:
      - DeviceName: "/dev/xvda"
        Ebs:
            VolumeSize: 80
      Tags:
        - Key: Name
          Value: 'router-server'
      UserData: !Base64 |
        #!/bin/bash
        sudo apt update
        sudo apt install git -y
        curl -fsSL https://get.docker.com -o get-docker.sh
        sudo sh get-docker.sh
        curl -SL https://github.com/docker/compose/releases/download/v2.5.1/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
        cd /home/ubuntu/
        git clone https://github.com/connext/nxtp-router-docker-compose.git
        cd /home/ubuntu/nxtp-router-docker-compose
        git config --global --add safe.directory /home/ubuntu/nxtp-router-docker-compose
        git checkout amarok
        cd /home/ubuntu/nxtp-router-docker-compose
        cp .env.example .env
        sed -i 's/latest/0.2.0-beta.0/g' .env
        cp config.example.json config.json
        cp key.example.yaml key.yaml
        sed -i 's/dkadkjasjdlkasdladadasda/{YOUR_PRIVATE_KEY}/g' key.yaml
        docker pull ghcr.io/connext/router:0.2.0-beta.0
        docker-compose create
        docker-compose up -d