AWSTemplateFormatVersion: "2010-09-09"

Description: Connext router infrastructure

Parameters:
  KeyName:
    Type: "AWS::EC2::KeyPair::KeyName"
    Default: YOUR_KEY_PAIR
    Description: The EC2 Key Pair to allow SSH access to the instances

  Email:
    Type: String
    Default: YOUR_EMAIL
    Description: Email for receive SNS alarm

  AzureClientId:
    Type: String
    Default: YOUR Azure Client Id
    Description: Azure Client id

  AzureClientSecret:
    Type: String
    Default: YOUR Azure Client Secret
    Description: Azure Client secret

  AzureTenantId:
    Type: String
    Default: YOUR Azure Tenant Id
    Description: Azure Tenant id

  AzureVaultName:
    Type: String
    Default: YOUR Azure Vault name
    Description: Azure Vault name

  AzureSecretName:
    Type: String
    Default: YOUR Azure Secret name
    Description: Azure Secret name

  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: develop

  VpcCIDR:
    Type: String
    Default: 192.168.0.0/16
    Description: The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range.

  PublicSubnet1CIDR:
    Type: String
    Default: 192.168.0.0/18
    Description: CidrBlock for public subnet 01 within the VPC

  PrivateSubnet1CIDR:
    Type: String
    Default: 192.168.128.0/18
    Description: CidrBlock for private subnet 01 within the VPC

Mappings:
  RegionMap:
    ap-southeast-1:
      "HVM64": "ami-059fcf742de12af88"

Resources:
  # ----------------------------------
  # VPC AND SUBNET
  # ----------------------------------
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-VPC"

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Subnets
        - Key: Network
          Value: Public

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Subnet AZ1
        - Key: Network
          Value: Private01

  PublicRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRoute01:
    DependsOn:
      - VPCGatewayAttachment
      - NatGateway01
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway01

  NatGateway01:
    DependsOn:
      - NatGatewayEIP1
      - PublicSubnet1
      - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt "NatGatewayEIP1.AllocationId"
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-NatGatewayAZ1"

  NatGatewayEIP1:
    DependsOn:
      - VPCGatewayAttachment
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} Public Subnet (AZ1)"

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} Private Subnet (AZ1)"

  # Remote Instance and security group
  RemoteSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Remote Security group allow ssh from outside
      VpcId: !Ref VPC

  RemoteSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: RemoteSecurityGroup
    Properties:
      GroupId: !Ref RemoteSecurityGroup
      Description: Allow ssh from outside
      FromPort: 22
      ToPort: 22
      IpProtocol: "tcp"
      CidrIp: 0.0.0.0/0

  RemoteInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", HVM64]
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref RemoteSecurityGroup
      Tags:
        - Key: Name
          Value: "remote-server"

  RouterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Remote Security group allow ssh from outside
      VpcId: !Ref VPC

  RouterSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: RouterSecurityGroup
    Properties:
      GroupId: !Ref RouterSecurityGroup
      Description: Allow ssh from outside
      FromPort: 22
      ToPort: 22
      IpProtocol: "tcp"
      SourceSecurityGroupId: !Ref RemoteSecurityGroup

  RouterInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: /
      Roles:
        - Ref: RouterInstanceRole

  RouterInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - secretsmanager.amazonaws.com
            Action:
              - "sts:AssumeRole"
      RoleName: !Sub "${AWS::StackName}-router-instance-role"

  RouterInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", HVM64]
      InstanceType: t2.large
      KeyName: !Ref KeyName
      SubnetId: !Ref PrivateSubnet1
      IamInstanceProfile: !Ref RouterInstanceProfile
      SecurityGroupIds:
        - !Ref RouterSecurityGroup
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: 80
      Tags:
        - Key: Name
          Value: "router-server"
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            wget -q -O router-setup.sh https://raw.githubusercontent.com/llPorZall/connext-cloud-formation/main/router-setup.sh && chmod +x router-setup.sh && sudo /bin/bash router-setup.sh ${AzureClientId} ${AzureClientSecret} ${AzureTenantId} ${AzureVaultName} ${AzureSecretName}

  # Cloudwatch dashboard
  RouterDashboard:
    Type: AWS::CloudWatch::Dashboard
    DependsOn: RouterInstance
    Properties:
      DashboardName: "connext-dashboard"
      DashboardBody: { "Fn::Join": [
              "",
              [
                '
                {
                  "widgets":[
                    {
                        "type":"metric",
                        "height": 4,
                        "width": 8,
                        "y": 0,
                        "x": 0,
                        "properties":{
                        "metrics":[
                          ["AWS/EC2","CPUUtilization","InstanceId",
                          "',
                          { Ref: RouterInstance },
                          '"]
                        ],
                        "legend": {
                            "position": "bottom"
                        },
                        "region": "ap-southeast-1",
                        "liveData": false,
                        "title": "CPU Utilization: Average"
                        }
                    },
                    {
                        "height": 4,
                        "width": 8,
                        "y": 4,
                        "x": 16,
                        "type": "metric",
                        "properties":{
                        "metrics":[
                          ["AWS/EC2","DiskReadBytes","InstanceId",
                          "',
                          { Ref: RouterInstance },
                          '"]
                        ],
                        "legend": {
                            "position": "bottom"
                        },
                        "region": "ap-southeast-1",
                        "liveData": false,
                        "title": "DiskReadBytes: Average"
                        }
                    },
                    {
                        "height": 4,
                        "width": 8,
                        "y": 8,
                        "x": 0,
                        "type": "metric",
                        "properties":{
                        "metrics":[
                          ["AWS/EC2","DiskReadOps","InstanceId",
                          "',
                          { Ref: RouterInstance },
                          '"]
                          ],
                          "legend": {
                              "position": "bottom"
                          },
                          "region": "ap-southeast-1",
                          "liveData": false,
                          "title": "DiskReadOps: Average"
                        }
                    },
                    {
                        "height": 4,
                        "width": 8,
                        "y": 4,
                        "x": 0,
                        "type": "metric",
                        "properties":{
                        "metrics":[
                          ["AWS/EC2","DiskWriteBytes","InstanceId",
                          "',
                          { Ref: RouterInstance },
                          '"]
                          ],
                        "legend": {
                            "position": "bottom"
                        },
                        "region": "ap-southeast-1",
                        "liveData": false,
                        "title": "DiskWriteBytes: Average"
                        }
                    },
                    {
                        "height": 4,
                        "width": 8,
                        "y": 4,
                        "x": 8,
                        "type": "metric",
                        "properties":{
                        "metrics":[
                          ["AWS/EC2","DiskWriteOps","InstanceId",
                          "',
                          { Ref: RouterInstance },
                          '"]
                          ],
                        "legend": {
                            "position": "bottom"
                        },
                        "region": "ap-southeast-1",
                        "liveData": false,
                        "title": "DiskWriteOps: Average"
                        }
                    },
                    {
                        "height": 4,
                        "width": 8,
                        "y": 0,
                        "x": 8,
                        "type": "metric",
                        "properties":{
                        "metrics":[
                          ["AWS/EC2","NetworkIn","InstanceId",
                          "',
                          { Ref: RouterInstance },
                          '"]
                          ],
                        "legend": {
                            "position": "bottom"
                        },
                        "region": "ap-southeast-1",
                        "liveData": false,
                        "title": "NetworkIn: Average"
                        }
                    },
                    {
                        "height": 4,
                        "width": 8,
                        "y": 0,
                        "x": 16,
                        "type": "metric",
                        "properties":{
                        "metrics":[
                          ["AWS/EC2","NetworkOut","InstanceId",
                          "',
                          { Ref: RouterInstance },
                          '"]
                          ],
                        "legend": {
                            "position": "bottom"
                        },
                        "region": "ap-southeast-1",
                        "liveData": false,
                        "title": "NetworkOut: Average"
                        }
                    },
                    {
                        "height": 4,
                        "width": 8,
                        "y": 8,
                        "x": 8,
                        "type": "metric",
                        "properties":{
                        "metrics":[
                          ["AWS/EC2","CPUCreditUsage","InstanceId",
                          "',
                          { Ref: RouterInstance },
                          '"]
                          ],
                        "legend": {
                            "position": "bottom"
                        },
                        "region": "ap-southeast-1",
                        "liveData": false,
                        "title": "CPUCreditUsage: Average"
                        }
                    },
                    {
                        "height": 4,
                        "width": 8,
                        "y": 8,
                        "x": 16,
                        "type": "metric",
                        "properties":{
                        "metrics":[
                          ["AWS/EC2","CPUCreditBalance","InstanceId",
                          "',
                          { Ref: RouterInstance },
                          '"]
                          ],
                        "legend": {
                            "position": "bottom"
                        },
                        "region": "ap-southeast-1",
                        "liveData": false,
                        "title": "CPUCreditBalance: Average"
                        }
                    }
                  ]
                }',
              ],
            ] }
  #Alarm system
  SNSTopic:
    Type: 'AWS::SNS::Topic'
    Properties: 
      Subscription:
        - Endpoint: !Ref Email
          Protocol: "email"
      TopicName: "connext-router-alarm"

  RouterCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn: RouterInstance
    Properties:
      AlarmDescription: CPU alarm for router instance
      AlarmActions: 
        - Ref: "SNSTopic"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      ActionsEnabled: true
      Period: '60'
      EvaluationPeriods: '3'
      Threshold: '50'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: InstanceId
        Value:
          Ref: RouterInstance